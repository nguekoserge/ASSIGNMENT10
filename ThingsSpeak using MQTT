#include <MQTT.h>

const long channelId = 2379160; // Replace with your ThingSpeak channel number.
String clientId = "FDgNKScPHAERDAs5Dz0tEAg";
String username = "FDgNKScPHAERDAs5Dz0tEAg";
String password = "FavIzVZX+66zYpVOV/s/JM9R";
char server[] = "mqtt3.thingspeak.com";

unsigned long lastConnectionTime = 0;
const unsigned long postingInterval = 20L * 1000L; // Post data every 20 seconds.

int strength = WiFi.RSSI();

MQTT client(server, 1883, callback); // Initialize the MQTT client.

void callback(char* topic, byte* payload, unsigned int length) {
    Serial.println(topic);
    
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    
    Serial.println(p);
}

void setup() {
    Serial.begin(9600);
    Particle.publish("Attempting MQTT connection");
    reconnect();
}

void loop() {
    // If MQTT client is not connected then reconnect.
    if (!client.isConnected()) {
        reconnect();
    }
    
    // Call the loop continuously to establish connection to the server.
    client.loop();  
    
    if (millis() - lastConnectionTime > postingInterval) {
        mqttpublish();
    }
}

void mqttpublish() {
    // Get SSID signal strength
    strength = WiFi.RSSI();
    
    // Create a data string to send data to ThingSpeak.
    String data = "field1=" + String(strength);
    String topic = "channels/" + String(channelId) + "/publish/fields/field1";
    
    Serial.println("PUBLISHED!!!: " + data);
    client.publish(topic, data);
    
    lastConnectionTime = millis();
}

void reconnect(){
    // Connect to the ThingSpeak MQTT broker.
    if (client.connect(clientId, username, password)) {
        Particle.publish("Connected to MQTT broker");
    } else {
        Particle.publish("Failed to connect. Trying to reconnect in 2 seconds");
        delay(2000);
    } 
}
